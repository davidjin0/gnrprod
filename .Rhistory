} else {
out_pricem <- as.matrix(out_price)
}
sharem = as.matrix(log(in_price * flex_input / out_price * y))
share_name = "share"
} else {
stop("must specify either share or intermediate-input price and output price")
}
complete_obs <- complete.cases(cbind(y, fixed_input, flex_input, idm, timem,
sharem))
y <- y[complete_obs]
fixed_input <- data.frame(fixed_input[complete_obs, ])
flex_input <- data.frame(flex_input[complete_obs])
idm <- idm[complete_obs]
timem <- timem[complete_obs]
sharem <- sharem[complete_obs]
all_input = as.matrix(cbind(fixed_input, flex_input))
poly_input = as.matrix(poly(all_input, degree = degree, raw = TRUE))
input_degrees <- sapply(colnames(poly_input), FUN = function(x) {
a <- data.frame(base::strsplit(x, split = "[.]")[[1]])
})
input_degrees <- do.call(cbind, input_degrees)
inputs = list("poly_input" = poly_input,
"input_degrees" = input_degrees,
"flex_in" = flex_input)
first_stage_list <- first_stage(output = y,
input = inputs,
share = sharem,
id = idm,
time = timem,
fs_control = fs_control,
degree = degree,
...)
fs_results <- first_stage_list[[1]]
fs_return <- first_stage_list[[2]]
if (firstStageOnly) {
return(fs_return)
}
second_stage_list <- second_stage(first_stage = fs_results, degree = degree,
markov_degree = markov_degree,
control = ss_control)
ss_return <- second_stage_list[[2]]
pred_elas <- second_stage_list[[1]]
flex_elas <- fs_results$flex_in_elasticity
elas <- cbind(pred_elas, flex_elas)
input_names <- c(fixed_name, flex_name)
input_names <- paste(input_names, "elasticity", sep = "_")
colnames(elas) <- input_names
return_df <- cbind(y, fixed_input, flex_input, idm, timem, sharem, elas)
colnames(return_df) <- c(output_name, fixed_name, flex_name, id_name,
time_name, share_name, input_names)
return_average_elas <- apply(elas, MARGIN = 2, FUN = mean)
names(return_average_elas) <- paste(input_names, "avg", sep = "_")
gnr_out <- list(return_average_elas, return_df, fs_return, ss_return, cl)
names(gnr_out) <- c("avg_elasticity", "point_estimates", "first_stage",
"second_stage", "call")
class(gnr_out) <- "gnr"
return(gnr_out)
}
extract.gnr <- function(object) object$point_estimates
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
nflex <- ncol(object$first_stage$flexible_inputs)
nfixed <- length(object$avg_elasticity) - nflex
print(nflex)
call_names <- names(object$point_estimates)
output_name <- noquote(call_names[1])
fixed_names <- noquote(call_names[2:(1 + nfixed)])
flex_names <- noquote(call_names[(2 + nfixed):(2 + nfixed + nflex)])
cat("Average Input Elasticities\n")
cat("   output: ", output_name, "\n", sep = "")
cat("   fixed inputs: ", fixed_names, "\n", sep = " ")
cat("   flexible inputs: ", flex_names, "\n", sep = " ")
if (is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
print(object$avg_elasticity, digits = digits)
invisible(object)
}
summary.gnr <- function(object) {
cat("Average Input Elasticities\n")
cat("  model: ", deparse(formula(object)), "\n", sep = "")
cat("   data: ", deparse(object$call$data), "\n", sep = "")
print(object$avg_elas, digits = digits)
invisible(object)
}
industry_311 <- prodgnr_2(output = "RGO",
fixed = c("L", "K"),
flex = "RI",
share = exp(data_311$si),
id = "id",
time = "year",
data = data_311,
degree = 3,
markov_degree = 3,
firstStageOnly = FALSE)
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
nflex <- ncol(object$first_stage$flexible_inputs)
nfixed <- length(object$avg_elasticity) - nflex
print(nfixed)
call_names <- names(object$point_estimates)
output_name <- noquote(call_names[1])
fixed_names <- noquote(call_names[2:(1 + nfixed)])
flex_names <- noquote(call_names[(2 + nfixed):(2 + nfixed + nflex)])
cat("Average Input Elasticities\n")
cat("   output: ", output_name, "\n", sep = "")
cat("   fixed inputs: ", fixed_names, "\n", sep = " ")
cat("   flexible inputs: ", flex_names, "\n", sep = " ")
if (is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311 <- prodgnr_2(output = "RGO",
fixed = c("L", "K"),
flex = "RI",
share = exp(data_311$si),
id = "id",
time = "year",
data = data_311,
degree = 3,
markov_degree = 3,
firstStageOnly = FALSE)
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
nflex <- ncol(object$first_stage$flexible_inputs)
nfixed <- length(object$avg_elasticity) - nflex
print(nfixed)
call_names <- names(object$point_estimates)
output_name <- noquote(call_names[1])
fixed_names <- noquote(call_names[2:(1 + nfixed)])
flex_names <- noquote(call_names[(2 + nfixed):(1 + nfixed + nflex)])
cat("Average Input Elasticities\n")
cat("   output: ", output_name, "\n", sep = "")
cat("   fixed inputs: ", fixed_names, "\n", sep = " ")
cat("   flexible inputs: ", flex_names, "\n", sep = " ")
if (is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_31
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
nflex <- ncol(object$first_stage$flexible_inputs)
nfixed <- length(object$avg_elasticity) - nflex
print(nfixed)
call_names <- names(object$point_estimates)
output_name <- noquote(call_names[1])
fixed_names <- noquote(call_names[2:(1 + nfixed)])
flex_names <- noquote(call_names[(2 + nfixed):(1 + nfixed + nflex)])
cat("Output: ", output_name, "\n", sep = "")
cat("Fixed inputs: ", fixed_names, "\n", sep = " ")
cat("Flexible inputs: ", flex_names, "\n", sep = " ")
if (is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
cat("Average Input Elasticities:\n")
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
nflex <- ncol(object$first_stage$flexible_inputs)
nfixed <- length(object$avg_elasticity) - nflex
call_names <- names(object$point_estimates)
output_name <- noquote(call_names[1])
fixed_names <- noquote(call_names[2:(1 + nfixed)])
flex_names <- noquote(call_names[(2 + nfixed):(1 + nfixed + nflex)])
cat("Output: ", output_name, "\n", sep = "")
cat("Fixed inputs: ", fixed_names, "\n", sep = " ")
cat("Flexible inputs: ", flex_names, "\n", sep = " ")
if (is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
cat("Average Input Elasticities:\n")
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
nflex <- ncol(object$first_stage$flexible_inputs)
nfixed <- length(object$avg_elasticity) - nflex
call_names <- names(object$point_estimates)
output_name <- noquote(call_names[1])
fixed_names <- noquote(call_names[2:(1 + nfixed)])
flex_names <- noquote(call_names[(2 + nfixed):(1 + nfixed + nflex)])
cat("Output: ", output_name, "\n", sep = "")
cat("Fixed inputs: ", fixed_names, "\n", sep = " ")
cat("Flexible inputs: ", flex_names, "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
cat("Average Input Elasticities:\n")
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
cat("Call:\n")
cat("    output: ", deparse(object$call$output), "\n", sep = "")
cat("    fixed inputs: ", deparse(object$call$fixed), "\n", sep = " ")
cat("    flexible inputs: ", deparse(object$call$flex), "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("    data: ", deparse(object$call$data), "\n", sep = "")
}
cat("Average Input Elasticities:\n")
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
cat("Call:\n")
cat("   output: ", deparse(object$call$output), "\n", sep = "")
cat("   fixed inputs: ", deparse(object$call$fixed), "\n", sep = " ")
cat("   flexible inputs: ", deparse(object$call$flex), "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
cat("Average Input Elasticities:\n")
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
cat("Call:\n")
cat("   output: ", deparse(object$call$output), "\n", sep = "")
cat("   fixed inputs: ", deparse(object$call$fixed), "\n", sep = " ")
cat("   flexible inputs: ", deparse(object$call$flex), "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("   data: ", deparse(object$call$data), "\n", sep = "")
}
cat("\n")
cat("Average Input Elasticities:\n")
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
cat("Call:\n")
cat("  output: ", deparse(object$call$output), "\n", sep = "")
cat("  fixed inputs: ", deparse(object$call$fixed), "\n", sep = " ")
cat("  flexible inputs: ", deparse(object$call$flex), "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("  data: ", deparse(object$call$data), "\n", sep = "")
}
cat("\n")
cat("Average Input Elasticities:\n")
print(object$avg_elasticity, digits = digits)
invisible(object)
}
industry_311
industry_311[["second_stage"]]
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
cat("Call:\n")
cat("  output: ", deparse(object$call$output), "\n", sep = "")
cat("  fixed inputs: ", deparse(object$call$fixed), "\n", sep = " ")
cat("  flexible inputs: ", deparse(object$call$flex), "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("  data: ", deparse(object$call$data), "\n", sep = "")
}
cat("\n")
cat("Average input elasticities:\n")
print(object$avg_elasticity, digits = digits)
cat("First stage sum of squared residuals: ", object$first_stage$SSR)
invisible(object)
}
industry_311
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
cat("Call:\n")
cat("  output: ", deparse(object$call$output), "\n", sep = "")
cat("  fixed inputs: ", deparse(object$call$fixed), "\n", sep = " ")
cat("  flexible inputs: ", deparse(object$call$flex), "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("  data: ", deparse(object$call$data), "\n", sep = "")
}
cat("\n")
cat("Average input elasticities:\n")
print(object$avg_elasticity, digits = digits)
cat("\n")
cat("First stage sum of squared residuals: ", object$first_stage$SSR)
invisible(object)
}
industry_311
block.boot.resample
block.boot.resample()
install.packages("prodest")
library(prodest)
test <- block.boot.resample(data_311$id)
test <- block.boot.resample(data_311$id, 10)
View(data_311)
test = na.omit(data_311)
test2 = block.boot.resample(test$id, 10)
idvar = data_311$id
unique_idvar = unique(idvar)
test2 = block.boot.resample(unique_idvar, 10)
is.na(unique_idvar)
sum(is.na(unique_idvar))
?block.boot.resample
panel.time.indices <- apply(unique_idvar, 1, function(x) {return(list(which(idvar == x)))})
require(prodest)
## Chilean data on production.The full version is Publicly available at
## http://www.ine.cl/canales/chile_estadistico/estadisticas_economicas/industria/
## series_estadisticas/series_estadisticas_enia.php
data(chilean)
# we fit a model with two free (skilled and unskilled), one state (capital)
# and one proxy variable (electricity)
ACF.fit <- prodestACF(chilean$Y, fX = cbind(chilean$fX1, chilean$fX2), chilean$sX,
chilean$pX, chilean$idvar, chilean$timevar,
theta0 = c(.5,.5,.5), R = 5)
View(ACF.fit)
test <- block.boot.resample(chilean$idvar, 100)
test <- block.boot.resample(t(idvar), 100)
idvar = t(idvar)
idvar = data_311$idvar
idvar = data_311$id
idvar = as.matrix(idvar)
View(idvar)
test = block.boot.resample(idvar, 10)
View(test)
test[[1]]
test = do.call(cbind, test)
View(test)
View(data_311)
length(unique(test[1,]))
length(unique(test[, 1]))
length(unique(test[, 2]))
length(unique(test[, 3]))
rm(ACF.fit)
rm(chilean)
#' Estimate the nonparametric model in two stages: the share regression and instrumental variable estimation
#'
#'
prodgnr_2 <- function(output,
fixed,
flex,
share,
id,
time,
data,
degree = 2,
markov_degree = 2,
price,
firstStageOnly = FALSE,
fs_control = list(),
ss_control = list(),
...) {
cl <- match.call()
if (is.character(output)) {
y <- as.matrix(log(data[, output]))
output_name <- output
} else {
y <- as.matrix(log(output))
output_name <- colnames(output)
if (is.null(output_name)) {
output_name <- deparse(substitute(output))
}
}
if (is.character(fixed)) {
fixed_input <- as.matrix(log(data[, fixed]))
fixed_name <- fixed
} else {
fixed_input <- as.matrix(log(fixed))
fixed_name <- colnames(fixed)
if (is.null(fixed_name)) {
fixed_name <- paste0(deparse(substitute(fixed)), 1L:ncol(fixed))
}
}
if (is.character(flex)) {
flex_input <- as.matrix(log(data[, flex]))
flex_name <- flex
} else {
flex_input <- as.matrix(log(flex))
flex_name <- colnames(flex)
if (is.null(flex_name)) {
flex_name <- deparse(substitute(flex))
}
}
if (is.character(id)) {
idm <- as.matrix(data[, id])
id_name <- id
} else {
idm <- as.matrix(id)
id_name <- colnames(id)
if (is.null(id_name)) {
id_name <- deparse(substitute(id))
}
}
if (is.character(time)) {
timem <- as.matrix(data[, time])
time_name <- time
} else {
timem <- as.matrix(timem)
time_name <- colnames(time)
if (is.null(time_name)) {
time_name <- deparse(substitute(time))
}
}
if (!missing(share) && is.character(share)) {
sharem <- as.matrix(log(data[, share]))
share_name <- share
} else if (!missing(share) && !is.character(share)) {
sharem <- as.matrix(log(share))
share_name <- colnames(share)
if (is.null(share_name)) {
share_name <- deparse(substitute(share))
}
} else if (!missing(in_price) && !missing(out_price)) {
if (is.character(in_price)) {
in_pricem <- as.matrix(data[, in_price])
} else {
in_pricem <- as.matrix(in_price)
}
if (is.character(out_price)) {
out_pricem <- as.matrix(data[, out_price])
} else {
out_pricem <- as.matrix(out_price)
}
sharem = as.matrix(log(in_price * flex_input / out_price * y))
share_name = "share"
} else {
stop("must specify either share or intermediate-input price and output price")
}
complete_obs <- complete.cases(cbind(y, fixed_input, flex_input, idm, timem,
sharem))
y <- y[complete_obs]
fixed_input <- data.frame(fixed_input[complete_obs, ])
flex_input <- data.frame(flex_input[complete_obs])
idm <- idm[complete_obs]
timem <- timem[complete_obs]
sharem <- sharem[complete_obs]
all_input = as.matrix(cbind(fixed_input, flex_input))
poly_input = as.matrix(poly(all_input, degree = degree, raw = TRUE))
input_degrees <- sapply(colnames(poly_input), FUN = function(x) {
a <- data.frame(base::strsplit(x, split = "[.]")[[1]])
})
input_degrees <- do.call(cbind, input_degrees)
inputs = list("poly_input" = poly_input,
"input_degrees" = input_degrees,
"flex_in" = flex_input)
first_stage_list <- first_stage(output = y,
input = inputs,
share = sharem,
id = idm,
time = timem,
fs_control = fs_control,
degree = degree,
...)
fs_results <- first_stage_list[[1]]
fs_return <- first_stage_list[[2]]
if (firstStageOnly) {
return(fs_return)
}
second_stage_list <- second_stage(first_stage = fs_results, degree = degree,
markov_degree = markov_degree,
control = ss_control)
ss_return <- second_stage_list[[2]]
pred_elas <- second_stage_list[[1]]
flex_elas <- fs_results$flex_in_elasticity
elas <- cbind(pred_elas, flex_elas)
input_names <- c(fixed_name, flex_name)
input_names <- paste(input_names, "elasticity", sep = "_")
colnames(elas) <- input_names
return_df <- cbind(y, fixed_input, flex_input, idm, timem, sharem, elas)
colnames(return_df) <- c(output_name, fixed_name, flex_name, id_name,
time_name, share_name, input_names)
return_average_elas <- apply(elas, MARGIN = 2, FUN = mean)
names(return_average_elas) <- paste(input_names, "avg", sep = "_")
gnr_out <- list(return_average_elas, return_df, fs_return, ss_return, cl)
names(gnr_out) <- c("avg_elasticity", "point_estimates", "first_stage",
"second_stage", "call")
class(gnr_out) <- "gnr"
return(gnr_out)
}
extract.gnr <- function(object) object$point_estimates
print.gnr <- function(object, digits = max(3L, getOption("digits") - 3L)) {
cat("Call:\n")
cat("  output: ", deparse(object$call$output), "\n", sep = "")
cat("  fixed inputs: ", deparse(object$call$fixed), "\n", sep = " ")
cat("  flexible inputs: ", deparse(object$call$flex), "\n", sep = " ")
if (!is.null(object$call$data)) {
cat("  data: ", deparse(object$call$data), "\n", sep = "")
}
cat("\n")
cat("Average input elasticities:\n")
print(object$avg_elasticity, digits = digits)
cat("\n")
cat("First stage sum of squared residuals: ", object$first_stage$SSR)
invisible(object)
}
rm(idvar)
rm(test)
rm(unique_idvar)
View(industry_311)
?poly
?complete.cases
na.omit?
?na.omit
?na.omit
type("beans")
typeof("beans")
View(data_311)
View(industry_311)
?complete.cases
?gaussNewton
library(gnrprod)
library(prodgnr)
library(prodgnr)
library(gnrprod)
?prodest
